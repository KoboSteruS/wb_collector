"""
API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import Optional, List
from loguru import logger

from app.db.proxy_storage import ProxyStorage

router = APIRouter(prefix="/proxies", tags=["proxies"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–æ–∫—Å–∏
proxy_storage = ProxyStorage()


class ProxyCreate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")
    host: str = Field(..., description="–•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏")
    port: int = Field(..., ge=1, le=65535, description="–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏")
    username: Optional[str] = Field(None, description="–õ–æ–≥–∏–Ω –ø—Ä–æ–∫—Å–∏")
    password: Optional[str] = Field(None, description="–ü–∞—Ä–æ–ª—å –ø—Ä–æ–∫—Å–∏")


class ProxyResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏"""
    uuid: str = Field(..., description="UUID –ø—Ä–æ–∫—Å–∏")
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")
    host: str = Field(..., description="–•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏")
    port: int = Field(..., description="–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏")
    username: Optional[str] = Field(None, description="–õ–æ–≥–∏–Ω –ø—Ä–æ–∫—Å–∏")
    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏")


@router.post("/add", response_model=dict)
async def add_proxy(proxy_data: ProxyCreate):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
    
    Args:
        proxy_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    """
    try:
        logger.info(f"üåê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {proxy_data.name} ({proxy_data.host}:{proxy_data.port})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        existing_proxies = proxy_storage.get_all_proxies()
        for proxy in existing_proxies:
            if proxy['name'] == proxy_data.name:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ü—Ä–æ–∫—Å–∏ —Å –∏–º–µ–Ω–µ–º '{proxy_data.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
        proxy_uuid = proxy_storage.add_proxy(
            name=proxy_data.name,
            host=proxy_data.host,
            port=proxy_data.port,
            username=proxy_data.username,
            password=proxy_data.password
        )
        
        logger.success(f"‚úÖ –ü—Ä–æ–∫—Å–∏ '{proxy_data.name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å UUID: {proxy_uuid}")
        
        return {
            "success": True,
            "message": f"–ü—Ä–æ–∫—Å–∏ '{proxy_data.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
            "proxy_uuid": proxy_uuid
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {str(e)}"
        )


@router.get("/list", response_model=List[ProxyResponse])
async def list_proxies():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
    """
    try:
        logger.debug("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏")
        
        proxies = proxy_storage.get_all_proxies()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
        response_proxies = []
        for proxy in proxies:
            response_proxies.append(ProxyResponse(
                uuid=proxy['uuid'],
                name=proxy['name'],
                host=proxy['host'],
                port=proxy['port'],
                username=proxy.get('username'),
                status=proxy.get('status', 'unknown')
            ))
        
        logger.debug(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(response_proxies)} –ø—Ä–æ–∫—Å–∏")
        return response_proxies
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {str(e)}"
        )


@router.get("/{proxy_uuid}", response_model=ProxyResponse)
async def get_proxy(proxy_uuid: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –ø–æ UUID
    
    Args:
        proxy_uuid: UUID –ø—Ä–æ–∫—Å–∏
        
    Returns:
        –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    """
    try:
        logger.debug(f"üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–∫—Å–∏: {proxy_uuid}")
        
        proxy = proxy_storage.get_proxy(proxy_uuid)
        
        if not proxy:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ–∫—Å–∏ —Å UUID {proxy_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return ProxyResponse(
            uuid=proxy['uuid'],
            name=proxy['name'],
            host=proxy['host'],
            port=proxy['port'],
            username=proxy.get('username'),
            status=proxy.get('status', 'unknown')
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_uuid}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {str(e)}"
        )


@router.delete("/delete/{proxy_uuid}")
async def delete_proxy(proxy_uuid: str):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏
    
    Args:
        proxy_uuid: UUID –ø—Ä–æ–∫—Å–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
    """
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {proxy_uuid}")
        
        success = proxy_storage.delete_proxy(proxy_uuid)
        
        if not success:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ–∫—Å–∏ —Å UUID {proxy_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        logger.success(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy_uuid} —É–¥–∞–ª–µ–Ω")
        
        return {
            "success": True,
            "message": f"–ü—Ä–æ–∫—Å–∏ {proxy_uuid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_uuid}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {str(e)}"
        )


@router.get("/available/list", response_model=List[ProxyResponse])
async def get_available_proxies():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    """
    try:
        logger.debug("–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
        
        available_proxies = proxy_storage.get_available_proxies()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        response_proxies = []
        for proxy in available_proxies:
            response_proxies.append(ProxyResponse(
                uuid=proxy['uuid'],
                name=proxy['name'],
                host=proxy['host'],
                port=proxy['port'],
                username=proxy.get('username'),
                status=proxy.get('status', 'active')
            ))
        
        logger.debug(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(response_proxies)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
        return response_proxies
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {str(e)}"
        )
