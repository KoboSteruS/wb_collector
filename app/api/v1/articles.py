"""
API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏

Endpoints –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
"""

from fastapi import APIRouter, HTTPException
from typing import List

from app.schemas import ArticleCreate, ArticleResponse, LinkResponse, ParsingStatus
from app.models import Article
from app.db import article_storage
from app.services.scheduler import parsing_scheduler
from app.core import logger


router = APIRouter(prefix="/articles", tags=["Articles"])


@router.post("/add", response_model=ArticleResponse)
async def add_article(article_data: ArticleCreate) -> ArticleResponse:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    
    Args:
        article_data: –î–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª–∞ (ID)
        
    Returns:
        ArticleResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∞—Ä—Ç–∏–∫—É–ª–µ
        
    Raises:
        HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞: {article_data.article_id}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
    article = Article(article_id=article_data.article_id)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    if not article_storage.add_article(article):
        raise HTTPException(
            status_code=400,
            detail=f"–ê—Ä—Ç–∏–∫—É–ª {article_data.article_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    return ArticleResponse(
        uuid=str(article.uuid),
        article_id=article.article_id,
        name=article.name,
        brand=article.brand,
        created_at=article.created_at.isoformat() if article.created_at else None,
        updated_at=article.updated_at.isoformat() if article.updated_at else None
    )


@router.get("/list", response_model=List[ArticleResponse])
async def list_articles() -> List[ArticleResponse]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤.
    
    Returns:
        List[ArticleResponse]: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    """
    logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    
    articles = article_storage.get_all_articles()
    
    return [
        ArticleResponse(
            uuid=str(article.uuid),
            article_id=article.article_id,
            name=article.name,
            brand=article.brand,
            created_at=article.created_at.isoformat() if article.created_at else None,
            updated_at=article.updated_at.isoformat() if article.updated_at else None
        )
        for article in articles
    ]


@router.get("/{article_id}/link", response_model=LinkResponse)
async def get_article_link(article_id: str) -> LinkResponse:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å —Å–∞–º—ã–º–∏ —á–∞—Å—Ç—ã–º–∏ SPP –∏ dest –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    
    Args:
        article_id: ID –∞—Ä—Ç–∏–∫—É–ª–∞ WB
        
    Returns:
        LinkResponse: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    analytics = article_storage.get_analytics(article_id)
    
    if not analytics:
        raise HTTPException(
            status_code=404,
            detail=f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id}. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–ª–∞–Ω–æ–≤–æ–≥–æ."
        )
    
    return LinkResponse(
        article_id=analytics.article_id,
        generated_url=analytics.generated_url,
        most_common_spp=analytics.most_common_spp,
        most_common_dest=analytics.most_common_dest,
        total_parses=analytics.total_parses,
        last_updated=analytics.last_updated.isoformat() if analytics.last_updated else None
    )


@router.post("/parse/now", response_model=ParsingStatus)
async def parse_now() -> ParsingStatus:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–≤–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è).
    
    Returns:
        ParsingStatus: –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é...")
    
    try:
        total_parsed = await parsing_scheduler.run_now()
        
        return ParsingStatus(
            status="success",
            message=f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            total_parsed=total_parsed
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}"
        )


@router.get("/schedule/status")
async def get_schedule_status() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    from app.core import settings
    
    return {
        "enabled": settings.PARSING_ENABLED,
        "schedule_hour": settings.PARSING_SCHEDULE_HOUR,
        "schedule_minute": settings.PARSING_SCHEDULE_MINUTE,
        "headless": settings.PARSING_HEADLESS,
        "schedule_description": f"–ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {settings.PARSING_SCHEDULE_HOUR:02d}:{settings.PARSING_SCHEDULE_MINUTE:02d}"
    }

