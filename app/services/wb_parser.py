"""
–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries

–ü–∞—Ä—Å–∏–Ω–≥ SPP –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º.
"""

import json
import gzip
import time
import tempfile
from io import BytesIO
from urllib.parse import urlparse, parse_qs
from typing import Optional, List, Dict
from uuid import uuid4

from seleniumwire import webdriver
from selenium.webdriver.chrome.options import Options

from app.core import logger, settings
from app.db import account_storage, article_storage
from app.models import ParsingResult


class WBParserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å Wildberries"""
    
    def __init__(self, headless: bool = True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.headless = headless
    
    def _extract_prices_and_stocks(
        self,
        json_bytes: bytes,
        target_id: Optional[str] = None
    ) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        try:
            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ gzip –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if json_bytes[:2] == b"\x1f\x8b":
                json_bytes = gzip.GzipFile(fileobj=BytesIO(json_bytes)).read()
            
            text = json_bytes.decode("utf-8", errors="ignore")
            data = json.loads(text)
            result = []
            
            for product in data.get("products", []):
                if target_id and str(product.get("id")) != str(target_id):
                    continue
                
                id_ = product.get("id")
                brand = product.get("brand")
                name = product.get("name")
                
                total_qty = 0
                price_basic = None
                price_product = None
                
                for size in product.get("sizes", []):
                    if not price_basic:
                        price_basic = size.get("price", {}).get("basic")
                        price_product = size.get("price", {}).get("product")
                    for stock in size.get("stocks", []):
                        total_qty += stock.get("qty", 0)
                
                result.append({
                    "id": id_,
                    "brand": brand,
                    "name": name,
                    "qty": total_qty,
                    "price_basic": price_basic,
                    "price_product": price_product,
                })
            
            return result
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return []
    
    def parse_article(
        self,
        article_id: str,
        account_uuid: str,
        cookies: str,
        proxy_data: Optional[dict] = None
    ) -> Optional[ParsingResult]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            article_id: ID –∞—Ä—Ç–∏–∫—É–ª–∞ WB
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            cookies: JSON —Å—Ç—Ä–æ–∫–∞ —Å cookies
            
        Returns:
            Optional[ParsingResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ None
        """
        options = Options()
        
        # –í–ê–ñ–ù–û: —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Chrome –±–∏–Ω–∞—Ä–Ω–∏–∫—É
        options.binary_location = "/opt/chrome/chrome"
        
        # –§–ª–∞–≥–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
        if self.headless:
            options.add_argument("--headless=new")
        
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--window-size=1920,1080")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if proxy_data:
            proxy_host = proxy_data.get('host')
            proxy_port = proxy_data.get('port')
            proxy_username = proxy_data.get('username')
            proxy_password = proxy_data.get('password')
            
            if proxy_host and proxy_port:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏
                if proxy_username and proxy_password:
                    proxy_string = f"{proxy_username}:{proxy_password}@{proxy_host}:{proxy_port}"
                else:
                    proxy_string = f"{proxy_host}:{proxy_port}"
                
                options.add_argument(f"--proxy-server=http://{proxy_string}")
                logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {proxy_host}:{proxy_port}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø–∞—Ä—Å–∏–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô chromedriver
        from selenium.webdriver.chrome.service import Service
        
        chromedriver_path = '/usr/bin/chromedriver'
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ ChromeDriver: {chromedriver_path}")
        
        service = Service(executable_path=chromedriver_path)
        driver = webdriver.Chrome(service=service, options=options)
        driver.scopes = ['.*u-card.wb.ru/cards/v4/detail.*']
        
        try:
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_uuid[:8]}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            driver.get("https://www.wildberries.ru/")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            cookies_list = json.loads(cookies)
            for cookie in cookies_list:
                try:
                    driver.add_cookie(cookie)
                except:
                    pass
            
            logger.debug(f"Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è {article_id}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            product_url = f"https://www.wildberries.ru/catalog/{article_id}/detail.aspx"
            driver.get(product_url)
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ø–æ–ø–∞–ø–∞ "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã"
            price_with_card = None
            card_discount_percent = None
            old_price = None
            base_price = None
            
            try:
                # 1. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã"
                logger.debug("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã...")
                
                popup_selectors = [
                    "button[data-link='text{:product^price}']",  # –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—ã
                    ".price-block__final-price",  # –ö–ª–∏–∫ –ø–æ —Ü–µ–Ω–µ
                    "ins.priceBlockFinalPrice--iToZR",  # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
                    ".price-block",  # –ë–ª–æ–∫ —Å —Ü–µ–Ω–æ–π
                    "[data-link*='price']",  # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å price –≤ data-link
                    "button[aria-label*='—Ü–µ–Ω–∞']",  # –ö–Ω–æ–ø–∫–∞ —Å aria-label
                    ".price-block__final-price ins"  # –ò–Ω—Å —Å —Ü–µ–Ω–æ–π
                ]
                
                popup_opened = False
                for selector in popup_selectors:
                    try:
                        element = driver.find_element("css selector", selector)
                        driver.execute_script("arguments[0].click();", element)
                        time.sleep(2)  # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –ø–æ–ø–∞–ø
                        popup_check = driver.find_elements("css selector", "[class*='popup'], [class*='modal'], [class*='details']")
                        if popup_check:
                            logger.debug(f"‚úÖ –ü–æ–ø–∞–ø –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                            popup_opened = True
                            break
                    except:
                        continue
                
                if not popup_opened:
                    logger.debug("‚ö†Ô∏è –ü–æ–ø–∞–ø –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ")
                
                # 2. –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã –∏–∑ –ø–æ–ø–∞–ø–∞ –∏–ª–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                time.sleep(1)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                
                # –ò—â–µ–º —Ü–µ–Ω—É "—Å WB –ö–æ—à–µ–ª—å–∫–æ–º" (—Ä–æ–∑–æ–≤–∞—è)
                wb_wallet_selectors = [
                    "[class*='wallet'][class*='price']",  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å wallet –∏ price
                    "[class*='WB'][class*='price']",  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å WB –∏ price
                    "span[class*='wallet']",  # Span —Å wallet
                    ".price-details [class*='wallet']",  # –í –±–ª–æ–∫–µ price-details
                    "[data-testid*='wallet']",  # –ü–æ data-testid
                    "div[class*='pink'], div[class*='red']"  # –†–æ–∑–æ–≤—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ –±–ª–æ–∫–∏
                ]
                
                for selector in wb_wallet_selectors:
                    try:
                        elements = driver.find_elements("css selector", selector)
                        for element in elements:
                            text = element.text.strip()
                            if "‚ÇΩ" in text and any(char.isdigit() for char in text):
                                price_text = text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                                if price_text.isdigit():
                                    price_with_card = int(price_text)
                                    logger.debug(f"üí≥ –¶–µ–Ω–∞ —Å WB –ö–æ—à–µ–ª—å–∫–æ–º –Ω–∞–π–¥–µ–Ω–∞: {price_with_card} ‚ÇΩ")
                                    break
                        if price_with_card:
                            break
                    except:
                        continue
                
                # –ò—â–µ–º —Ü–µ–Ω—É "–±–µ–∑ WB –ö–æ—à–µ–ª—å–∫–∞" (—Å–µ—Ä–∞—è)
                regular_price_selectors = [
                    "[class*='regular'][class*='price']",  # –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
                    "[class*='without'][class*='wallet']",  # –ë–µ–∑ –∫–æ—à–µ–ª—å–∫–∞
                    ".price-details [class*='without']",  # –í –±–ª–æ–∫–µ price-details
                    "div[class*='gray'], div[class*='white']"  # –°–µ—Ä—ã–µ/–±–µ–ª—ã–µ –±–ª–æ–∫–∏
                ]
                
                for selector in regular_price_selectors:
                    try:
                        elements = driver.find_elements("css selector", selector)
                        for element in elements:
                            text = element.text.strip()
                            if "‚ÇΩ" in text and any(char.isdigit() for char in text):
                                price_text = text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                                if price_text.isdigit():
                                    base_price = int(price_text)
                                    logger.debug(f"üìä –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {base_price} ‚ÇΩ")
                                    break
                        if base_price:
                            break
                    except:
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–æ–ø–∞–ø–µ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                if not price_with_card or not base_price:
                    logger.debug("üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                    
                    # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã —Å –∫–∞—Ä—Ç–æ–π
                    old_card_selectors = [
                        "span.priceBlockWalletPrice--RJGuT",
                        "[class*='wallet'][class*='price']",
                        "span[class*='wallet']"
                    ]
                    
                    for selector in old_card_selectors:
                        try:
                            element = driver.find_element("css selector", selector)
                            text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                            if text.isdigit():
                                price_with_card = int(text)
                                logger.debug(f"üí≥ –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π (—Å—Ç–∞—Ä—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä): {price_with_card} ‚ÇΩ")
                                break
                        except:
                            continue
                    
                    # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω—ã
                    old_base_selectors = [
                        "ins.priceBlockFinalPrice--iToZR",
                        "ins.price-block__final-price",
                        ".price-block__final-price",
                        "span.price-block__final-price"
                    ]
                    
                    for selector in old_base_selectors:
                        try:
                            element = driver.find_element("css selector", selector)
                            text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                            if text.isdigit():
                                base_price = int(text)
                                logger.debug(f"üìä –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ (—Å—Ç–∞—Ä—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä): {base_price} ‚ÇΩ")
                                break
                        except:
                            continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø–æ –∫–∞—Ä—Ç–µ
                if base_price and price_with_card and base_price > price_with_card:
                    card_discount_percent = round(
                        ((base_price - price_with_card) / base_price * 100), 2
                    )
                    logger.debug(f"üí≥ –°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ WB: {card_discount_percent}%")
                
                # –ò—â–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É (–∑–∞—á–µ—Ä–∫–Ω—É—Ç—É—é)
                old_price_selectors = [
                    "span.priceBlockOldPrice--qSWAf",
                    "span[class*='old']",
                    "del",
                    "s",
                    "[class*='old'][class*='price']"
                ]
                
                for selector in old_price_selectors:
                    try:
                        element = driver.find_element("css selector", selector)
                        text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                        if text.isdigit():
                            old_price = int(text)
                            logger.debug(f"üìâ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price} ‚ÇΩ")
                            break
                    except:
                        continue
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ü–µ–Ω: {e}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
            logger.debug(f"–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(driver.requests)}")
            result = None
            for request in driver.requests:
                if "u-card.wb.ru/cards/v4/detail" in request.url and request.response:
                    params = parse_qs(urlparse(request.url).query)
                    params_simple = {k: v[0] if len(v) == 1 else v for k, v in params.items()}
                    
                    body = request.response.body or b""
                    extracted = self._extract_prices_and_stocks(body, target_id=article_id)
                    
                    if extracted:
                        item = extracted[0]
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º SPP
                        price_basic = item.get("price_basic", 0)
                        price_product = item.get("price_product", 0)
                        spp_real = round(
                            100 - (price_product / price_basic * 100), 2
                        ) if price_basic else 0
                        
                        dest = params_simple.get("dest", "123585633")
                        
                        result = ParsingResult(
                            article_id=article_id,
                            account_uuid=account_uuid,
                            spp=spp_real,
                            dest=dest,
                            price_basic=price_basic,
                            price_product=price_product,
                            price_with_card=price_with_card,
                            card_discount_percent=card_discount_percent,
                            qty=item.get("qty", 0)
                        )
                        
                        card_info = ""
                        if price_with_card:
                            card_info = f" | üí≥ {price_with_card}‚ÇΩ"
                            if card_discount_percent:
                                card_info += f" (-{card_discount_percent}%)"
                            if old_price:
                                card_info += f" | üìâ –ë—ã–ª–æ: {old_price}‚ÇΩ"
                        
                        logger.success(
                            f"‚úÖ {item.get('brand')} | "
                            f"{price_product/100:.2f}‚ÇΩ –∏–∑ {price_basic/100:.2f}‚ÇΩ "
                            f"(SPP {spp_real}%) | dest={dest} | qty={item.get('qty')}{card_info}"
                        )
                        break
            
            if not result:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id} (–∑–∞–ø—Ä–æ—Å–æ–≤: {len(driver.requests)})")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {article_id}: {e}")
            return None
        finally:
            driver.quit()
    
    def parse_all_articles(self) -> int:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã.
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤...")
        
        articles = article_storage.get_all_articles()
        accounts = account_storage.get_all_accounts()
        
        if not articles:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return 0
        
        if not accounts:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return 0
        
        total_parsed = 0
        
        for article in articles:
            logger.info(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {article.article_id}...")
            
            for account in accounts:
                if not account.cookies:
                    logger.warning(f"‚ö†Ô∏è –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} –Ω–µ—Ç cookies")
                    continue
                
                result = self.parse_article(
                    article.article_id,
                    str(account.uuid),
                    account.cookies
                )
                
                if result:
                    article_storage.add_parsing_result(result)
                    total_parsed += 1
                
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞
            article_storage.update_analytics(article.article_id)
        
        logger.success(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_parsed} –∑–∞–ø–∏—Å–µ–π")
        return total_parsed


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
wb_parser = WBParserService(headless=settings.PARSING_HEADLESS)

