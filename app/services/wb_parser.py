"""
–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries

–ü–∞—Ä—Å–∏–Ω–≥ SPP –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º.
"""

import time
import json
import concurrent.futures
from typing import Optional, List, Dict
from uuid import uuid4

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

from app.core import logger, settings
from app.db import account_storage, article_storage
from app.models import ParsingResult


class WBParserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å Wildberries"""
    
    def __init__(self, headless: bool = True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.headless = headless
    
    
    def parse_article(
        self,
        article_id: str,
        account_uuid: str,
        cookies: str,
        proxy_data: Optional[dict] = None
    ) -> Optional[ParsingResult]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            article_id: ID –∞—Ä—Ç–∏–∫—É–ª–∞ WB
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            cookies: JSON —Å—Ç—Ä–æ–∫–∞ —Å cookies
            
        Returns:
            Optional[ParsingResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ None
        """
        options = Options()
        
        # –í–ê–ñ–ù–û: —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Chrome –±–∏–Ω–∞—Ä–Ω–∏–∫—É
        options.binary_location = "/opt/chrome/chrome"
        
        # –§–ª–∞–≥–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
        if self.headless:
            options.add_argument("--headless=new")
        
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--window-size=1920,1080")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if proxy_data:
            proxy_host = proxy_data.get('host')
            proxy_port = proxy_data.get('port')
            proxy_username = proxy_data.get('username')
            proxy_password = proxy_data.get('password')
            
            if proxy_host and proxy_port:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏
                if proxy_username and proxy_password:
                    proxy_string = f"{proxy_username}:{proxy_password}@{proxy_host}:{proxy_port}"
                else:
                    proxy_string = f"{proxy_host}:{proxy_port}"
                
                options.add_argument(f"--proxy-server=http://{proxy_string}")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
                options.add_argument('--proxy-bypass-list=<-loopback>')
                options.add_argument('--disable-web-security')
                options.add_argument('--disable-features=VizDisplayCompositor')
                options.add_argument('--ignore-certificate-errors')
                options.add_argument('--ignore-ssl-errors')
                options.add_argument('--ignore-certificate-errors-spki-list')
                logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {proxy_host}:{proxy_port}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
                try:
                    import socket
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(5)
                    result = sock.connect_ex((proxy_host, int(proxy_port)))
                    sock.close()
                    if result != 0:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy_host}:{proxy_port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –ø–∞—Ä—Å–∏–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô chromedriver
        from selenium.webdriver.chrome.service import Service
        
        chromedriver_path = '/usr/bin/chromedriver'
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ ChromeDriver: {chromedriver_path}")
        
        service = Service(executable_path=chromedriver_path)
        driver = webdriver.Chrome(service=service, options=options)
        
        try:
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id} —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account_uuid[:8]}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            driver.get("https://www.wildberries.ru/")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            cookies_list = json.loads(cookies)
            for cookie in cookies_list:
                try:
                    driver.add_cookie(cookie)
                except:
                    pass
            
            logger.debug(f"Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è {article_id}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            product_url = f"https://www.wildberries.ru/catalog/{article_id}/detail.aspx"
            driver.get(product_url)
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ø–æ–ø–∞–ø–∞ "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã"
            price_with_card = None
            card_discount_percent = None
            old_price = None
            base_price = None
            
            try:
                # 1. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã"
                logger.debug("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã...")
                
                popup_selectors = [
                    ".productPrice--FrVYO",  # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Ü–µ–Ω—ã
                    ".priceBlock--ZADKT",  # –ë–ª–æ–∫ —Ü–µ–Ω—ã
                    ".priceDetailsPointer--pPAL4",  # –£–∫–∞–∑–∞—Ç–µ–ª—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                    "button[data-link='text{:product^price}']",  # –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—ã
                    ".price-block__final-price",  # –ö–ª–∏–∫ –ø–æ —Ü–µ–Ω–µ
                    "ins.priceBlockFinalPrice--iToZR",  # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
                    ".price-block",  # –ë–ª–æ–∫ —Å —Ü–µ–Ω–æ–π
                    "[data-link*='price']",  # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å price –≤ data-link
                    "button[aria-label*='—Ü–µ–Ω–∞']",  # –ö–Ω–æ–ø–∫–∞ —Å aria-label
                    ".price-block__final-price ins"  # –ò–Ω—Å —Å —Ü–µ–Ω–æ–π
                ]
                
                popup_opened = False
                for selector in popup_selectors:
                    try:
                        element = driver.find_element("css selector", selector)
                        driver.execute_script("arguments[0].click();", element)
                        time.sleep(2)  # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ø–∞–ø–∞
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –ø–æ–ø–∞–ø
                        popup_check = driver.find_elements("css selector", "[class*='popup'], [class*='modal'], [class*='details']")
                        if popup_check:
                            logger.debug(f"‚úÖ –ü–æ–ø–∞–ø –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                            popup_opened = True
                            break
                    except:
                        continue
                
                if not popup_opened:
                    logger.debug("‚ö†Ô∏è –ü–æ–ø–∞–ø –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ")
                else:
                    logger.debug("‚úÖ –ü–æ–ø–∞–ø –æ—Ç–∫—Ä—ã—Ç, –ø–∞—Ä—Å–∏–º —Ü–µ–Ω—ã –∏–∑ –Ω–µ–≥–æ...")
                    
                    # –ò—â–µ–º —Ü–µ–Ω—ã –≤ –ø–æ–ø–∞–ø–µ
                    popup_price_selectors = [
                        ".walletPriceWrap--GjYV7 h2",  # –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π –≤ –ø–æ–ø–∞–ø–µ
                        ".finalPriceWrap--tKHRP h2",   # SPP —Ü–µ–Ω–∞ –≤ –ø–æ–ø–∞–ø–µ
                        ".finalPriceWrap--tKHRP span", # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –≤ –ø–æ–ø–∞–ø–µ
                        "h2",  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
                        ".price-details-price",
                        "[class*='price']"
                    ]
                    
                    for selector in popup_price_selectors:
                        try:
                            elements = driver.find_elements("css selector", selector)
                            for element in elements:
                                text = element.text.strip()
                                if "‚ÇΩ" in text and any(char.isdigit() for char in text):
                                    price_text = text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                                    if price_text.isdigit():
                                        if not price_with_card:
                                            price_with_card = int(price_text)
                                            logger.debug(f"üí≥ –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π –Ω–∞–π–¥–µ–Ω–∞: {price_with_card} ‚ÇΩ")
                                        elif not base_price:
                                            base_price = int(price_text)
                                            logger.debug(f"üìä –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {base_price} ‚ÇΩ")
                                            break
                            if base_price:
                                break
                        except:
                            continue
                
                # 2. –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã –∏–∑ –ø–æ–ø–∞–ø–∞ –∏–ª–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                time.sleep(1)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ Chrome
                page_title = driver.title.lower()
                page_source = driver.page_source.lower()
                
                if "this site can't be reached" in page_source or "err_no_supported_proxies" in page_source:
                    logger.error(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {article_id}: ERR_NO_SUPPORTED_PROXIES")
                    logger.error(f"üåê –ü—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Wildberries")
                    return ParsingResult(
                        article_id=article_id,
                        account_uuid=account_uuid,
                        spp=0,
                        dest="123585633",
                        price_basic=0,
                        price_product=0,
                        price_with_card=0,
                        card_discount_percent=0,
                        qty=0
                    )
                
                if "site can't be reached" in page_source or "temporarily down" in page_source:
                    logger.error(f"üö´ –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {article_id}")
                    return ParsingResult(
                        article_id=article_id,
                        account_uuid=account_uuid,
                        spp=0,
                        dest="123585633",
                        price_basic=0,
                        price_product=0,
                        price_with_card=0,
                        card_discount_percent=0,
                        qty=0
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                if not price_with_card and not base_price:
                    try:
                        html_content = driver.page_source
                        with open(f"wb_page_debug_{article_id}.html", "w", encoding="utf-8") as f:
                            f.write(html_content)
                        logger.debug(f"üíæ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: wb_page_debug_{article_id}.html")
                    except Exception as e:
                        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML: {e}")
                
                # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–±—ã—Ö —Ü–µ–Ω
                universal_price_selectors = [
                    # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
                    "[class*='price']",
                    "[class*='Price']", 
                    "span:contains('‚ÇΩ')",
                    "div:contains('‚ÇΩ')",
                    "ins:contains('‚ÇΩ')",
                    "h2:contains('‚ÇΩ')",
                    "h3:contains('‚ÇΩ')",
                    # –ü–æ —Ç–µ–∫—Å—Ç—É —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É ‚ÇΩ
                    "*:contains('‚ÇΩ')",
                    # –í—Å–µ span –∏ div —Å —á–∏—Å–ª–∞–º–∏
                    "span",
                    "div",
                    "ins",
                    "h1", "h2", "h3", "h4", "h5", "h6"
                ]
                
                # –ò—â–µ–º —Ü–µ–Ω—É "—Å WB –ö–æ—à–µ–ª—å–∫–æ–º" (—Ä–æ–∑–æ–≤–∞—è)
                wb_wallet_selectors = [
                    "[class*='wallet'][class*='price']",  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å wallet –∏ price
                    "[class*='WB'][class*='price']",  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å WB –∏ price
                    "span[class*='wallet']",  # Span —Å wallet
                    ".price-details [class*='wallet']",  # –í –±–ª–æ–∫–µ price-details
                    "[data-testid*='wallet']",  # –ü–æ data-testid
                    "div[class*='pink'], div[class*='red']"  # –†–æ–∑–æ–≤—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ –±–ª–æ–∫–∏
                ]
                
                for selector in wb_wallet_selectors:
                    try:
                        elements = driver.find_elements("css selector", selector)
                        for element in elements:
                            text = element.text.strip()
                            if "‚ÇΩ" in text and any(char.isdigit() for char in text):
                                price_text = text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                                if price_text.isdigit():
                                    price_with_card = int(price_text)
                                    logger.debug(f"üí≥ –¶–µ–Ω–∞ —Å WB –ö–æ—à–µ–ª—å–∫–æ–º –Ω–∞–π–¥–µ–Ω–∞: {price_with_card} ‚ÇΩ")
                                    break
                        if price_with_card:
                            break
                    except:
                        continue
                
                # –ò—â–µ–º —Ü–µ–Ω—É "–±–µ–∑ WB –ö–æ—à–µ–ª—å–∫–∞" (—Å–µ—Ä–∞—è)
                regular_price_selectors = [
                    "[class*='regular'][class*='price']",  # –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
                    "[class*='without'][class*='wallet']",  # –ë–µ–∑ –∫–æ—à–µ–ª—å–∫–∞
                    ".price-details [class*='without']",  # –í –±–ª–æ–∫–µ price-details
                    "div[class*='gray'], div[class*='white']"  # –°–µ—Ä—ã–µ/–±–µ–ª—ã–µ –±–ª–æ–∫–∏
                ]
                
                for selector in regular_price_selectors:
                    try:
                        elements = driver.find_elements("css selector", selector)
                        for element in elements:
                            text = element.text.strip()
                            if "‚ÇΩ" in text and any(char.isdigit() for char in text):
                                price_text = text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                                if price_text.isdigit():
                                    base_price = int(price_text)
                                    logger.debug(f"üìä –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {base_price} ‚ÇΩ")
                                    break
                        if base_price:
                            break
                    except:
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–æ–ø–∞–ø–µ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                if not price_with_card or not base_price:
                    logger.debug("üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                    
                    # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
                    logger.debug("üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ü–µ–Ω...")
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        all_elements = driver.find_elements("xpath", "//*[contains(text(), '‚ÇΩ')]")
                        prices_found = []
                        
                        logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(all_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å ‚ÇΩ")
                        
                        for element in all_elements:
                            try:
                                text = element.text.strip()
                                if text and len(text) < 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                                    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                                    import re
                                    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã)
                                    numbers = re.findall(r'[\d\s\xa0\u00A0]+', text)
                                    for num in numbers:
                                        clean_num = num.replace(" ", "").replace("\xa0", "").replace("\u00A0", "").replace("&nbsp;", "").strip()
                                        if clean_num.isdigit() and len(clean_num) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã
                                            price_value = int(clean_num)
                                            if 10 <= price_value <= 1000000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã —Ü–µ–Ω
                                                prices_found.append({
                                                    'price': price_value,
                                                    'text': text,
                                                    'tag': element.tag_name,
                                                    'class': element.get_attribute('class') or '',
                                                    'id': element.get_attribute('id') or ''
                                                })
                                                logger.debug(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {price_value}‚ÇΩ | '{text}' | {element.tag_name} | {element.get_attribute('class')[:30]}")
                                                break
                            except Exception as e:
                                continue
                        
                        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ü–µ–Ω–µ
                        unique_prices = {}
                        for p in prices_found:
                            if p['price'] not in unique_prices:
                                unique_prices[p['price']] = p
                        
                        prices_found = list(unique_prices.values())
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                        prices_found.sort(key=lambda x: x['price'], reverse=True)
                        
                        if prices_found:
                            logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(prices_found)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:")
                            for i, price_info in enumerate(prices_found[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                                logger.debug(f"  {i+1}. {price_info['price']}‚ÇΩ | '{price_info['text']}' | {price_info['tag']} | {price_info['class'][:30]}")
                            
                            # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –¶–ï–ù
                            if len(prices_found) >= 3:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å 3+ —Ü–µ–Ω—ã, –±–µ—Ä–µ–º –ø–æ –ª–æ–≥–∏–∫–µ:
                                # 1. –°–∞–º–∞—è –±–æ–ª—å—à–∞—è = —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞)
                                # 2. –í—Ç–æ—Ä–∞—è = SPP —Ü–µ–Ω–∞ (—Ü–µ–Ω–∞ —Å —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–¥–∞–≤—Ü–∞)
                                # 3. –¢—Ä–µ—Ç—å—è = —Ü–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π WB
                                old_price = prices_found[0]['price']
                                base_price = prices_found[1]['price'] 
                                price_with_card = prices_found[2]['price']
                                logger.debug(f"üéØ 3+ —Ü–µ–Ω: —Å—Ç–∞—Ä–∞—è={old_price}‚ÇΩ, SPP={base_price}‚ÇΩ, –∫–∞—Ä—Ç–∞={price_with_card}‚ÇΩ")
                            elif len(prices_found) == 2:
                                # –ï—Å–ª–∏ 2 —Ü–µ–Ω—ã, –±–µ—Ä–µ–º –±–æ–ª—å—à—É—é –∫–∞–∫ SPP, –º–µ–Ω—å—à—É—é –∫–∞–∫ –∫–∞—Ä—Ç—É
                                base_price = prices_found[0]['price']
                                price_with_card = prices_found[1]['price']
                                logger.debug(f"üéØ 2 —Ü–µ–Ω—ã: SPP={base_price}‚ÇΩ, –∫–∞—Ä—Ç–∞={price_with_card}‚ÇΩ")
                            elif len(prices_found) == 1:
                                # –ï—Å–ª–∏ 1 —Ü–µ–Ω–∞, –±–µ—Ä–µ–º –∫–∞–∫ SPP
                                base_price = prices_found[0]['price']
                                logger.debug(f"üéØ 1 —Ü–µ–Ω–∞: SPP={base_price}‚ÇΩ")
                        else:
                            logger.debug("‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")
                                
                    except Exception as e:
                        logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
                    
                    # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã —Å –∫–∞—Ä—Ç–æ–π
                    old_card_selectors = [
                        "span.priceBlockWalletPrice--RJGuT.redPrice--iueN6",
                        "span.priceBlockWalletPrice--RJGuT",
                        ".redPrice--iueN6",
                        "span[class*='redPrice']",
                        "[class*='wallet'][class*='price']",
                        "span[class*='wallet']"
                    ]
                    
                    for selector in old_card_selectors:
                        try:
                            logger.debug(f"üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã: {selector}")
                            element = driver.find_element("css selector", selector)
                            text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                            logger.debug(f"üìù –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: '{element.text}' -> '{text}'")
                            if text.isdigit():
                                price_with_card = int(text)
                                logger.debug(f"üí≥ –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π –Ω–∞–π–¥–µ–Ω–∞: {price_with_card} ‚ÇΩ")
                                break
                        except Exception as e:
                            logger.debug(f"‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                            continue
                    
                    # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω—ã (SPP —Ü–µ–Ω–∞)
                    old_base_selectors = [
                        "ins.priceBlockFinalPrice--iToZR.wallet--N1t3o",
                        "ins.priceBlockFinalPrice--iToZR",
                        ".priceBlockFinalPrice--iToZR",
                        "ins[class*='priceBlockFinalPrice']",
                        "ins.price-block__final-price",
                        ".price-block__final-price",
                        "span.price-block__final-price"
                    ]
                    
                    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞)
                    old_price_selectors = [
                        "span.priceBlockOldPrice--qSWAf",
                        ".priceBlockOldPrice--qSWAf",
                        "span[class*='OldPrice']",
                        "span[class*='old']",
                        "del",
                        "s",
                        "span[style*='line-through']"
                    ]
                    
                    for selector in old_base_selectors:
                        try:
                            logger.debug(f"üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω—ã: {selector}")
                            element = driver.find_element("css selector", selector)
                            text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                            logger.debug(f"üìù –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: '{element.text}' -> '{text}'")
                            if text.isdigit():
                                base_price = int(text)
                                logger.debug(f"üí∞ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {base_price} ‚ÇΩ")
                                break
                        except Exception as e:
                            logger.debug(f"‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                            continue
                    
                    # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞)
                    for selector in old_price_selectors:
                        try:
                            logger.debug(f"üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã: {selector}")
                            element = driver.find_element("css selector", selector)
                            text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                            logger.debug(f"üìù –¢–µ–∫—Å—Ç —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã: '{element.text}' -> '{text}'")
                            if text.isdigit():
                                old_price = int(text)
                                logger.debug(f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {old_price} ‚ÇΩ")
                                break
                        except Exception as e:
                            logger.debug(f"‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                            continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø–æ –∫–∞—Ä—Ç–µ
                if base_price and price_with_card and base_price > price_with_card:
                    card_discount_percent = round(
                        ((base_price - price_with_card) / base_price * 100), 2
                    )
                    logger.debug(f"üí≥ –°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ WB: {card_discount_percent}%")
                
                # –ò—â–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É (–∑–∞—á–µ—Ä–∫–Ω—É—Ç—É—é)
                old_price_selectors = [
                    "span.priceBlockOldPrice--qSWAf",
                    "span[class*='old']",
                    "del",
                    "s",
                    "[class*='old'][class*='price']"
                ]
                
                for selector in old_price_selectors:
                    try:
                        element = driver.find_element("css selector", selector)
                        text = element.text.replace("‚ÇΩ", "").replace(" ", "").replace("\xa0", "").strip()
                        if text.isdigit():
                            old_price = int(text)
                            logger.debug(f"üìâ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price} ‚ÇΩ")
                            break
                    except:
                        continue
                        
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ü–µ–Ω: {e}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML (–±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)
            logger.debug("üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            result = None
            try:
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                brand = "Unknown"
                try:
                    brand_element = driver.find_element("css selector", "h1[data-link='text{:product^goodsName}']")
                    brand = brand_element.text.strip()
                except:
                    pass
                
                # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                qty = 0
                try:
                    qty_element = driver.find_element("css selector", "[data-link='text{:product^totalQuantity}']")
                    qty_text = qty_element.text.replace("—à—Ç.", "").strip()
                    qty = int(qty_text) if qty_text.isdigit() else 0
                except:
                    pass
                
                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –¶–ï–ù:
                # 1. price_base - —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞)
                # 2. price_spp - —Ü–µ–Ω–∞ —Å SPP (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Å —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–¥–∞–≤—Ü–∞) 
                # 3. price_card - —Ü–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π WB (–¥–æ–ø. —Å–∫–∏–¥–∫–∞ –æ—Ç SPP)
                
                price_base = old_price or 0        # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–∑–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è)
                price_spp = base_price or 0        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (SPP)
                price_card = price_with_card or 0  # –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π WB
                
                # –í—ã—á–∏—Å–ª—è–µ–º SPP (—Å–∫–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã)
                spp_real = 0
                if price_base and price_spp and price_base > price_spp:
                    spp_real = round((1 - price_spp / price_base) * 100, 2)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–∏–¥–∫—É –∫–∞—Ä—Ç—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –æ—Ç SPP —Ü–µ–Ω—ã)
                card_discount_real = 0
                if price_spp and price_card and price_spp > price_card:
                    card_discount_real = round((1 - price_card / price_spp) * 100, 2)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = ParsingResult(
                    article_id=article_id,
                    account_uuid=account_uuid,
                    spp=spp_real,
                    dest="123585633",  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π dest
                    price_basic=price_base,      # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
                    price_product=price_spp,     # –¶–µ–Ω–∞ —Å SPP
                    price_with_card=price_card,  # –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π WB
                    card_discount_percent=card_discount_real,  # –°–∫–∏–¥–∫–∞ –∫–∞—Ä—Ç—ã –æ—Ç SPP
                    qty=qty
                )
                
                card_info = ""
                if price_card:
                    card_info = f" | üí≥ {price_card}‚ÇΩ"
                    if card_discount_real:
                        card_info += f" (-{card_discount_real}%)"
                    if old_price:
                        card_info += f" | üìâ –ë—ã–ª–æ: {old_price}‚ÇΩ"
                
                logger.success(
                    f"‚úÖ {brand} | "
                    f"{price_spp/100:.2f}‚ÇΩ –∏–∑ {price_base/100:.2f}‚ÇΩ "
                    f"(SPP {spp_real}%) | qty={qty}{card_info}"
                )
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            
            if not result:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article_id}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {article_id}: {e}")
            return None
        finally:
            driver.quit()
    
    def parse_all_articles(self) -> int:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –ø–æ –ø—Ä–æ–∫—Å–∏.
        
        –õ–æ–≥–∏–∫–∞:
        1. –ê–∫–∫–∞—É–Ω—Ç—ã –° –ø—Ä–æ–∫—Å–∏ - –ø–∞—Ä—Å—è—Ç—Å—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û (–¥–æ 5 –ø–æ—Ç–æ–∫–æ–≤)
        2. –ê–∫–∫–∞—É–Ω—Ç—ã –ë–ï–ó –ø—Ä–æ–∫—Å–∏ - –ø–∞—Ä—Å—è—Ç—Å—è –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π...")
        
        articles = article_storage.get_all_articles()
        accounts = account_storage.get_all_accounts()
        
        if not articles:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return 0
        
        if not accounts:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return 0
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã
        accounts_with_proxy = []
        accounts_without_proxy = []
        
        from app.db.proxy_storage import ProxyStorage
        proxy_storage = ProxyStorage()
        
        for account in accounts:
            if not account.cookies:
                logger.warning(f"‚ö†Ô∏è –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} –Ω–µ—Ç cookies")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–∫—Å–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞
            proxy_uuid = getattr(account, 'proxy_uuid', None)
            if proxy_uuid:
                proxy_data = proxy_storage.get_proxy(proxy_uuid)
                if proxy_data:
                    accounts_with_proxy.append((account, proxy_data))
                    logger.debug(f"üåê –ê–∫–∫–∞—É–Ω—Ç {account.name} —Å –ø—Ä–æ–∫—Å–∏ {proxy_data['name']}")
                else:
                    accounts_without_proxy.append((account, None))
                    logger.warning(f"‚ö†Ô∏è –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                accounts_without_proxy.append((account, None))
                logger.debug(f"üì± –ê–∫–∫–∞—É–Ω—Ç {account.name} –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(accounts_with_proxy)} —Å –ø—Ä–æ–∫—Å–∏, {len(accounts_without_proxy)} –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        total_parsed = 0
        
        # 1. –ü–ê–†–°–ò–ú –ê–ö–ö–ê–£–ù–¢–´ –° –ü–†–û–ö–°–ò (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –¥–æ 5 –ø–æ—Ç–æ–∫–æ–≤)
        if accounts_with_proxy:
            logger.info("üåê –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
            total_parsed += self._parse_with_proxy_parallel(articles, accounts_with_proxy)
        
        # 2. –ü–ê–†–°–ò–ú –ê–ö–ö–ê–£–ù–¢–´ –ë–ï–ó –ü–†–û–ö–°–ò (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
        if accounts_without_proxy:
            logger.info("üì± –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)...")
            total_parsed += self._parse_without_proxy_sequential(articles, accounts_without_proxy)
        
        # 3. –û–ë–ù–û–í–õ–Ø–ï–ú –ê–ù–ê–õ–ò–¢–ò–ö–£ –î–õ–Ø –í–°–ï–• –ê–†–¢–ò–ö–£–õ–û–í
        for article in articles:
            article_storage.update_analytics(article.article_id)
        
        logger.success(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_parsed} –∑–∞–ø–∏—Å–µ–π")
        return total_parsed
    
    def _parse_with_proxy_parallel(self, articles, accounts_with_proxy) -> int:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏ (–¥–æ 5 –ø–æ—Ç–æ–∫–æ–≤).
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            accounts_with_proxy: –°–ø–∏—Å–æ–∫ (–∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–æ–∫—Å–∏_–¥–∞–Ω–Ω—ã–µ)
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
        """
        import threading
        
        total_parsed = 0
        max_workers = min(5, len(accounts_with_proxy))  # –î–æ 5 –ø–æ—Ç–æ–∫–æ–≤
        
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {max_workers} –ø–æ—Ç–æ–∫–æ–≤")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
            futures = []
            
            for article in articles:
                logger.info(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {article.article_id} (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏
                for account, proxy_data in accounts_with_proxy:
                    future = executor.submit(
                        self._parse_single_article_with_proxy,
                        article.article_id,
                        str(account.uuid),
                        account.cookies,
                        proxy_data
                    )
                    futures.append(future)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            for future in concurrent.futures.as_completed(futures):
                try:
                    result = future.result()
                    if result:
                        article_storage.add_parsing_result(result)
                        total_parsed += 1
                        logger.debug(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {result.article_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        
        logger.info(f"üåê –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {total_parsed} –∑–∞–ø–∏—Å–µ–π")
        return total_parsed
    
    def _parse_without_proxy_sequential(self, articles, accounts_without_proxy) -> int:
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–∫—Å–∏.
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            accounts_without_proxy: –°–ø–∏—Å–æ–∫ (–∞–∫–∫–∞—É–Ω—Ç, None)
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
        """
        total_parsed = 0
        
        logger.info(f"üì± –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(accounts_without_proxy)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        for article in articles:
            logger.info(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ç–∏–∫—É–ª–∞ {article.article_id} (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)...")
            
            for account, _ in accounts_without_proxy:
                logger.debug(f"üì± –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç {account.name} (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)")
                
                result = self.parse_article(
                    article.article_id,
                    str(account.uuid),
                    account.cookies,
                    proxy_data=None  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
                )
                
                if result:
                    article_storage.add_parsing_result(result)
                    total_parsed += 1
                
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        
        logger.info(f"üì± –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {total_parsed} –∑–∞–ø–∏—Å–µ–π")
        return total_parsed
    
    def _parse_single_article_with_proxy(self, article_id, account_uuid, cookies, proxy_data):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è).
        
        Args:
            article_id: ID –∞—Ä—Ç–∏–∫—É–ª–∞
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            cookies: Cookies –∞–∫–∫–∞—É–Ω—Ç–∞
            proxy_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            
        Returns:
            ParsingResult –∏–ª–∏ None
        """
        try:
            logger.debug(f"üåê –ü–∞—Ä—Å–∏–Ω–≥ {article_id} —á–µ—Ä–µ–∑ {account_uuid} —Å –ø—Ä–æ–∫—Å–∏ {proxy_data['name']}")
            
            result = self.parse_article(
                article_id,
                account_uuid,
                cookies,
                proxy_data=proxy_data
            )
            
            if result:
                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω {article_id} —á–µ—Ä–µ–∑ {account_uuid}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å {article_id} —á–µ—Ä–µ–∑ {account_uuid}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {article_id} —á–µ—Ä–µ–∑ {account_uuid}: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
wb_parser = WBParserService(headless=settings.PARSING_HEADLESS)

