"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Wildberries

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç WB —á–µ—Ä–µ–∑ Selenium.
"""

import time
import json
import tempfile
from typing import Optional
from uuid import uuid4

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from app.core import logger


class WBAuthService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Wildberries.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞.
    """
    
    def __init__(self, headless: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            headless: –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        """
        self.headless = headless
    
    def _start_browser(self) -> webdriver.Chrome:
        """
        –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Chrome.
        
        Returns:
            webdriver.Chrome: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞
        """
        opts = Options()
        if self.headless:
            opts.add_argument("--headless=new")
        
        # –§–ª–∞–≥–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GPU (Ubuntu —Å–µ—Ä–≤–µ—Ä)
        opts.add_argument("--disable-gpu")
        opts.add_argument("--disable-software-rasterizer")
        opts.add_argument("--disable-dev-shm-usage")
        opts.add_argument("--no-sandbox")
        opts.add_argument("--disable-setuid-sandbox")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
        opts.add_argument("--disable-blink-features=AutomationControlled")
        opts.add_argument("--window-size=1280,2400")
        opts.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - Chrome —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        opts.add_argument("--disable-extensions")
        opts.add_argument("--disable-default-apps")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        opts.add_argument("--single-process")
        opts.add_argument("--disable-features=VizDisplayCompositor")
        
        logger.debug("–ó–∞–ø—É—Å–∫ Chrome —Å headless —Ä–µ–∂–∏–º–æ–º")
        
        try:
            import undetected_chromedriver as uc
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —á–µ—Ä–µ–∑ undetected-chromedriver")
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è undetected_chromedriver
            uc_options = uc.ChromeOptions()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ –∏–∑ opts (–∫—Ä–æ–º–µ headless - –æ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç)
            for arg in opts.arguments:
                if '--headless' not in arg:
                    uc_options.add_argument(arg)
            
            # –î–ª—è headless –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.headless:
                uc_options.add_argument('--headless=new')
            
            # undetected_chromedriver –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç Chrome –∏ —Å–∫–∞—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥—Ä–∞–π–≤–µ—Ä
            driver = uc.Chrome(
                options=uc_options,
                headless=False,  # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π headless uc
                use_subprocess=False,  # –í–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                version_main=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            )
            
            logger.info("‚úÖ Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ undetected-chromedriver")
            return driver
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {e}")
            raise
    
    def _safe_click(self, driver: webdriver.Chrome, elem) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –æ–±—Ö–æ–¥–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π.
        
        Args:
            driver: –î—Ä–∞–π–≤–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞
            elem: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞
        """
        try:
            elem.click()
            return True
        except Exception:
            try:
                ActionChains(driver).move_to_element(elem).click().perform()
                return True
            except Exception:
                return False
    
    async def login_and_get_cookies_with_ws(
        self,
        phone: str,
        auth_session
    ) -> Optional[str]:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ WB –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ cookies —á–µ—Ä–µ–∑ WebSocket.
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ +7
            auth_session: –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å WebSocket
            
        Returns:
            Optional[str]: JSON —Å—Ç—Ä–æ–∫–∞ —Å cookies –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        driver = self._start_browser()
        wait = WebDriverWait(driver, 20)
        
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
            await auth_session.send_message("status", {
                "step": "started",
                "message": "–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞..."
            })
            
            driver.get("https://www.wildberries.ru/security/login")
            
            # –ü—Ä–∏–Ω—è—Ç–∏–µ cookies –±–∞–Ω–Ω–µ—Ä–∞
            try:
                cookie_btn = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, ".cookies__btn"))
                )
                cookie_btn.click()
                logger.info("–ë–∞–Ω–Ω–µ—Ä cookies –ø—Ä–∏–Ω—è—Ç")
            except:
                logger.warning("–ë–∞–Ω–Ω–µ—Ä cookies –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            await auth_session.send_message("status", {
                "step": "page_loaded",
                "message": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            })
            
            # –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            logger.info("–ü–æ–∏—Å–∫ –ø–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
            phone_input = None
            for css in [
                "input[data-testid='phoneInput']",
                "input[inputmode='tel']",
                "input[type='tel']"
            ]:
                try:
                    phone_input = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, css))
                    )
                    if phone_input.is_displayed():
                        break
                except:
                    pass
            
            if not phone_input:
                raise Exception("–ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
            self._safe_click(driver, phone_input)
            phone_input.clear()
            logger.info(f"–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞: {phone}")
            
            await auth_session.send_message("status", {
                "step": "entering_phone",
                "message": f"–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}"
            })
            
            for ch in phone:
                phone_input.send_keys(ch)
                time.sleep(0.07)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
            val = phone_input.get_attribute("value") or ""
            digits_only = "".join([c for c in val if c.isdigit()])
            
            if not digits_only.endswith(phone):
                raise Exception(f"–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (value='{val}')")
            
            logger.info("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω")
            
            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"
            logger.info("–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥'...")
            btn = wait.until(
                EC.element_to_be_clickable((
                    By.CSS_SELECTOR,
                    "#requestCode, [data-testid='requestCodeBtn']"
                ))
            )
            driver.execute_script("arguments[0].scrollIntoView({block:'center'});", btn)
            time.sleep(0.4)
            self._safe_click(driver, btn)
            logger.info("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥' –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            await auth_session.send_message("status", {
                "step": "code_requested",
                "message": "–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            })
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –∫–æ–¥–∞
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –∫–æ–¥–∞...")
            inputs = []
            for _ in range(30):
                inputs = driver.find_elements(By.CSS_SELECTOR, "input.j-b-charinput")
                if len(inputs) >= 4:
                    break
                time.sleep(1)
            
            if not inputs:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(inputs)} –ø–æ–ª–µ–π –¥–ª—è –∫–æ–¥–∞")
            
            await auth_session.send_message("status", {
                "step": "waiting_for_code",
                "message": "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            })
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            code = await auth_session.wait_for_code(timeout=300)
            
            if not code:
                raise Exception("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞")
            
            logger.info("–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω, –≤–≤–æ–¥–∏–º –≤ –ø–æ–ª—è...")
            await auth_session.send_message("status", {
                "step": "entering_code",
                "message": "–í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            })
            
            # –í–≤–æ–¥ –∫–æ–¥–∞ –≤ –ø–æ–ª—è
            for i, ch in enumerate(code):
                if i < len(inputs):
                    inputs[i].send_keys(ch)
                    time.sleep(0.15)
            
            logger.info("–ö–æ–¥ –≤–≤–µ–¥–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            await auth_session.send_message("status", {
                "step": "verifying",
                "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞..."
            })
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            time.sleep(5)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ cookies –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            cookies = driver.get_cookies()
            cookies_json = json.dumps(cookies, ensure_ascii=False)
            
            logger.info("Cookies —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
            await auth_session.send_message("status", {
                "step": "success",
                "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            })
            
            return cookies_json
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await auth_session.send_message("error", {
                "message": str(e)
            })
            try:
                driver.save_screenshot("wb_login_error.png")
                logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: wb_login_error.png")
            except:
                pass
            return None
            
        finally:
            driver.quit()

