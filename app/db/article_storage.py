"""
–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞

–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
"""

import json
from pathlib import Path
from typing import Dict, Optional, List
from collections import Counter
from uuid import UUID

from app.models import Article, ParsingResult, ArticleAnalytics
from app.core import logger


class ArticleStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(
        self,
        articles_file: str = "data/articles.json",
        results_file: str = "data/parsing_results.json",
        analytics_file: str = "data/analytics.json"
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        self.articles_file = Path(articles_file)
        self.results_file = Path(results_file)
        self.analytics_file = Path(analytics_file)
        
        for file in [self.articles_file, self.results_file, self.analytics_file]:
            file.parent.mkdir(parents=True, exist_ok=True)
            if not file.exists():
                self._save_json(file, {})
    
    def _load_json(self, file_path: Path) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ JSON"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
            return {}
    
    def _save_json(self, file_path: Path, data: Dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON"""
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")
    
    # === –ê–†–¢–ò–ö–£–õ–´ ===
    
    def add_article(self, article: Article) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞"""
        try:
            data = self._load_json(self.articles_file)
            article_id = article.article_id
            
            if article_id in data:
                logger.warning(f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª {article_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            data[article_id] = article.to_dict()
            self._save_json(self.articles_file, data)
            logger.success(f"üì¶ –ê—Ä—Ç–∏–∫—É–ª {article_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞: {e}")
            return False
    
    def get_all_articles(self) -> List[Article]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
        try:
            data = self._load_json(self.articles_file)
            articles = []
            
            for article_data in data.values():
                article = Article(
                    article_id=article_data["article_id"],
                    name=article_data.get("name"),
                    brand=article_data.get("brand"),
                    uuid=UUID(article_data["uuid"])
                )
                articles.append(article)
            
            return articles
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {e}")
            return []
    
    # === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê ===
    
    def add_parsing_result(self, result: ParsingResult) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        try:
            data = self._load_json(self.results_file)
            
            article_id = result.article_id
            account_uuid = result.account_uuid
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if article_id not in data:
                data[article_id] = {}
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            data[article_id][account_uuid] = result.to_dict()
            self._save_json(self.results_file, data)
            logger.debug(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {article_id} (–∞–∫–∫–∞—É–Ω—Ç {account_uuid[:8]}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False
    
    def get_parsing_results(self, article_id: str) -> List[ParsingResult]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
        try:
            data = self._load_json(self.results_file)
            results = []
            
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: article_id -> {account_uuid: result}
            article_data = data.get(article_id, {})
            
            for account_uuid, result_data in article_data.items():
                result = ParsingResult(
                    article_id=result_data["article_id"],
                    account_uuid=result_data["account_uuid"],
                    spp=result_data["spp"],
                    dest=result_data["dest"],
                    price_basic=result_data["price_basic"],
                    price_product=result_data["price_product"],
                    qty=result_data["qty"],
                    uuid=UUID(result_data["uuid"])
                )
                results.append(result)
            
            return results
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []
    
    # === –ê–ù–ê–õ–ò–¢–ò–ö–ê ===
    
    def update_analytics(self, article_id: str) -> Optional[ArticleAnalytics]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
        try:
            results = self.get_parsing_results(article_id)
            
            if not results:
                return None
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ SPP –∏ dest
            spp_counter = Counter([r.spp for r in results])
            dest_counter = Counter([r.dest for r in results])
            
            most_common_spp = spp_counter.most_common(1)[0][0]
            most_common_dest = dest_counter.most_common(1)[0][0]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            generated_url = self._generate_url(
                article_id,
                int(most_common_spp),
                most_common_dest
            )
            
            analytics = ArticleAnalytics(
                article_id=article_id,
                most_common_spp=most_common_spp,
                most_common_dest=most_common_dest,
                generated_url=generated_url,
                total_parses=len(results)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            data = self._load_json(self.analytics_file)
            data[article_id] = analytics.to_dict()
            self._save_json(self.analytics_file, data)
            
            logger.success(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {article_id}: SPP={most_common_spp}, dest={most_common_dest} (–ø–∞—Ä—Å–∏–Ω–≥–æ–≤: {len(results)})")
            return analytics
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return None
    
    def get_analytics(self, article_id: str) -> Optional[ArticleAnalytics]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
        try:
            data = self._load_json(self.analytics_file)
            
            if article_id not in data:
                return None
            
            analytics_data = data[article_id]
            return ArticleAnalytics(
                article_id=analytics_data["article_id"],
                most_common_spp=analytics_data["most_common_spp"],
                most_common_dest=analytics_data["most_common_dest"],
                generated_url=analytics_data["generated_url"],
                total_parses=analytics_data["total_parses"]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return None
    
    def _generate_url(self, article_id: str, spp: int, dest: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
        base_url = "https://card.wb.ru/cards/v4/detail"
        return (
            f"{base_url}?appType=1&curr=rub&dest={dest}"
            f"&spp={spp}&hide_dtype=11&ab_testing=false"
            f"&lang=ru&nm={article_id}"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
article_storage = ArticleStorage()

