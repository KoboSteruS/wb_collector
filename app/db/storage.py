"""
–ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤

–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ë–î.
"""

import json
from pathlib import Path
from typing import Dict, Optional, List
from uuid import UUID

from app.models import Account
from app.core import logger


class AccountStorage:
    """
    –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ JSON.
    
    –ü—Ä–æ—Å—Ç–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
    """
    
    def __init__(self, storage_file: str = "data/accounts.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
        
        Args:
            storage_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        self.storage_file = Path(storage_file)
        self.storage_file.parent.mkdir(parents=True, exist_ok=True)
        
        if not self.storage_file.exists():
            self._save_data({})
    
    def _load_data(self) -> Dict:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞.
        
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        try:
            with open(self.storage_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _save_data(self, data: Dict) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            with open(self.storage_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_account(self, account: Account) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account: –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            data = self._load_data()
            account_uuid = str(account.uuid)
            
            if account_uuid in data:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_uuid} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            data[account_uuid] = account.to_dict()
            self._save_data(data)
            logger.success(f"üíæ –ê–∫–∫–∞—É–Ω—Ç '{account.name}' (üì± {account.phone}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            logger.debug(f"UUID –∞–∫–∫–∞—É–Ω—Ç–∞: {account_uuid}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False
    
    def get_account(self, account_uuid: str) -> Optional[Account]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ UUID.
        
        Args:
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            Optional[Account]: –ê–∫–∫–∞—É–Ω—Ç –∏–ª–∏ None
        """
        try:
            data = self._load_data()
            account_data = data.get(account_uuid)
            
            if not account_data:
                return None
            
            return Account(
                name=account_data["name"],
                phone=account_data["phone"],
                cookies=account_data.get("cookies"),
                uuid=UUID(account_data["uuid"]),
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return None
    
    def update_cookies(self, account_uuid: str, cookies: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            cookies: –ù–æ–≤—ã–µ cookies
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            from datetime import datetime
            import json as json_lib
            
            data = self._load_data()
            
            if account_uuid not in data:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            data[account_uuid]["cookies"] = cookies
            data[account_uuid]["updated_at"] = datetime.utcnow().isoformat()
            
            self._save_data(data)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies
            cookies_list = json_lib.loads(cookies)
            logger.success(f"üç™ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_uuid}")
            logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(cookies_list)} cookies")
            logger.debug(f"Cookies: {cookies[:100]}...")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies: {e}")
            return False
    
    def get_all_accounts(self) -> List[Account]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        
        Returns:
            List[Account]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        try:
            data = self._load_data()
            accounts = []
            
            for account_data in data.values():
                account = Account(
                    name=account_data["name"],
                    phone=account_data["phone"],
                    cookies=account_data.get("cookies"),
                    uuid=UUID(account_data["uuid"]),
                )
                accounts.append(account)
            
            return accounts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []
    
    def update_account(
        self, 
        account_uuid: str, 
        name: Optional[str] = None, 
        phone: Optional[str] = None,
        proxy_uuid: Optional[str] = None
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            name: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            phone: –ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            proxy_uuid: UUID –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            data = self._load_data()
            account_data = data.get(account_uuid)
            
            if not account_data:
                logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            if name is not None:
                account_data['name'] = name
            if phone is not None:
                account_data['phone'] = phone
            if proxy_uuid is not None:
                account_data['proxy_uuid'] = proxy_uuid
            elif proxy_uuid is None and 'proxy_uuid' in account_data:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ None
                del account_data['proxy_uuid']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            from datetime import datetime
            account_data['updated_at'] = datetime.now().isoformat()
            
            data[account_uuid] = account_data
            self._save_data(data)
            
            logger.success(f"–ê–∫–∫–∞—É–Ω—Ç {account_uuid} –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_uuid}: {e}")
            return False
    
    def delete_account(self, account_uuid: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            data = self._load_data()
            
            if account_uuid not in data:
                logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return False
            
            account_name = data[account_uuid].get('name', 'Unknown')
            del data[account_uuid]
            self._save_data(data)
            
            logger.success(f"–ê–∫–∫–∞—É–Ω—Ç '{account_name}' ({account_uuid}) —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_uuid}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
account_storage = AccountStorage()

