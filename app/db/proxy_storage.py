"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import json
import os
from typing import List, Optional, Dict, Any
from uuid import uuid4
from loguru import logger


class ProxyStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, data_dir: str = "data"):
        self.data_dir = data_dir
        self.proxies_file = os.path.join(data_dir, "proxies.json")
        self._ensure_data_dir()
        self._ensure_proxies_file()
    
    def _ensure_data_dir(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)
            logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.data_dir}")
    
    def _ensure_proxies_file(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.proxies_file):
            with open(self.proxies_file, 'w', encoding='utf-8') as f:
                json.dump({}, f, ensure_ascii=False, indent=2)
            logger.debug(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø—Ä–æ–∫—Å–∏: {self.proxies_file}")
    
    def add_proxy(self, name: str, host: str, port: int, username: Optional[str] = None, password: Optional[str] = None) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
            host: –•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏
            port: –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
            username: –õ–æ–≥–∏–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            password: –ü–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            UUID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏
            with open(self.proxies_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            proxy_uuid = str(uuid4())
            proxy_data = {
                "uuid": proxy_uuid,
                "name": name,
                "host": host,
                "port": port,
                "username": username,
                "password": password,
                "status": "active",
                "created_at": None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ API
                "updated_at": None
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            proxies[proxy_uuid] = proxy_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.proxies_file, 'w', encoding='utf-8') as f:
                json.dump(proxies, f, ensure_ascii=False, indent=2)
            
            logger.success(f"üåê –ü—Ä–æ–∫—Å–∏ '{name}' ({host}:{port}) –¥–æ–±–∞–≤–ª–µ–Ω —Å UUID: {proxy_uuid}")
            return proxy_uuid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            raise
    
    def get_proxy(self, proxy_uuid: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –ø–æ UUID
        
        Args:
            proxy_uuid: UUID –ø—Ä–æ–∫—Å–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None
        """
        try:
            with open(self.proxies_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)
            
            return proxies.get(proxy_uuid)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_uuid}: {e}")
            return None
    
    def get_all_proxies(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
        """
        try:
            with open(self.proxies_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)
            
            return list(proxies.values())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return []
    
    def delete_proxy(self, proxy_uuid: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏
        
        Args:
            proxy_uuid: UUID –ø—Ä–æ–∫—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            with open(self.proxies_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)
            
            if proxy_uuid not in proxies:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            proxy_name = proxies[proxy_uuid].get('name', 'Unknown')
            del proxies[proxy_uuid]
            
            with open(self.proxies_file, 'w', encoding='utf-8') as f:
                json.dump(proxies, f, ensure_ascii=False, indent=2)
            
            logger.success(f"üóëÔ∏è –ü—Ä–æ–∫—Å–∏ '{proxy_name}' ({proxy_uuid}) —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_uuid}: {e}")
            return False
    
    def update_proxy_status(self, proxy_uuid: str, status: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
        
        Args:
            proxy_uuid: UUID –ø—Ä–æ–∫—Å–∏
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            with open(self.proxies_file, 'r', encoding='utf-8') as f:
                proxies = json.load(f)
            
            if proxy_uuid not in proxies:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            proxies[proxy_uuid]['status'] = status
            
            with open(self.proxies_file, 'w', encoding='utf-8') as f:
                json.dump(proxies, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üîÑ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ {proxy_uuid} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {status}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏ {proxy_uuid}: {e}")
            return False
    
    def get_available_proxies(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (—Å—Ç–∞—Ç—É—Å active)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        """
        all_proxies = self.get_all_proxies()
        return [proxy for proxy in all_proxies if proxy.get('status') == 'active']
    
    def get_proxy_for_account(self, account_uuid: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è)
        
        Args:
            account_uuid: UUID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ None
        """
        available_proxies = self.get_available_proxies()
        
        if not available_proxies:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
            return None
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø–æ —Ö–µ—à—É UUID –∞–∫–∫–∞—É–Ω—Ç–∞
        import hashlib
        hash_value = int(hashlib.md5(account_uuid.encode()).hexdigest(), 16)
        proxy_index = hash_value % len(available_proxies)
        
        selected_proxy = available_proxies[proxy_index]
        logger.debug(f"üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_uuid[:8]}: {selected_proxy['name']}")
        
        return selected_proxy
